name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  AWS_REGION: 'eu-west-2'

jobs:
  # ============================================================================
  # CODE QUALITY & TESTING
  # ============================================================================

  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:all

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm test

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # ============================================================================
  # TERRAFORM VALIDATION
  # ============================================================================

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.0'

      - name: Terraform Format Check
        run: terraform fmt -check -recursive infra/

      - name: Terraform Init
        working-directory: infra/envs/dev
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: infra/envs/dev
        run: terraform validate

      - name: Terraform Plan (Dry Run)
        working-directory: infra/envs/dev
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # BUILD & DEPLOY (ONLY ON MAIN BRANCH)
  # ============================================================================

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-and-lint, terraform-validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Lambda packages
        run: npm run build:lambda:dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.0'

      - name: Terraform Init
        working-directory: infra/envs/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: infra/envs/dev
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      - name: Terraform Apply
        working-directory: infra/envs/dev
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      - name: Run post-deploy tests
        run: npm run postdeploy:dev
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
      - name: Notify on success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add your notification logic here (Slack, Teams, etc.)

      - name: Notify on failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add your notification logic here (Slack, Teams, etc.)
