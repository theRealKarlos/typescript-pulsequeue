name: CI/CD Pipeline

on:
  push:
    branches:
      - 'development'
      - 'release*'
      - 'master'
  pull_request:
    branches:
      - 'master'
      - 'development'

# Add permissions for CodeQL action to access workflow run information
permissions:
  actions: read
  contents: read
  security-events: write
  id-token: write # Required for OIDC authentication with AWS

# Add concurrency control to prevent multiple deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  AWS_REGION: 'eu-west-2'

jobs:
  # ============================================================================
  # CODE QUALITY & TESTING (ALL BRANCHES)
  # ============================================================================

  build-lambda-zips:
    name: Build Lambda ZIPs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      # Build all Lambda ZIPs for staging environment
      - name: Build all Lambda packages (staging)
        run: npx ts-node scripts/build-lambda.ts --env=staging
        env:
          ENVIRONMENT: staging

      # Build all Lambda ZIPs for production environment
      - name: Build all Lambda packages (prod)
        run: npx ts-node scripts/build-lambda.ts --env=prod
        env:
          ENVIRONMENT: prod

      - name: List all Lambda ZIPs with absolute paths
        run: find ${{ github.workspace }}/dist -type f -name "*.zip" | xargs ls -lh
      # After building Lambda ZIPs
      - name: Upload Lambda ZIPs
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zips
          path: dist/

  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    needs: build-lambda-zips

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:all
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}

      - name: Determine Environment
        id: env
        run: |
          if [[ ${{ github.ref_name }} == master ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref_name }} == release* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          echo "Environment determined: ${{ steps.env.outputs.environment }}"

      - name: Run unit tests
        run: |
          echo "ENVIRONMENT variable: $ENVIRONMENT"
          npm test
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
          NODE_ENV: test

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # ============================================================================
  # TERRAFORM VALIDATION (ALL BRANCHES)
  # ============================================================================

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: build-lambda-zips

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::379673441375:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive infra/

      - name: Download Lambda ZIPs
        uses: actions/download-artifact@v4
        with:
          name: lambda-zips
          path: dist/

      - name: Determine Environment
        id: env
        run: |
          if [[ ${{ github.ref_name }} == master ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref_name }} == release* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Validate (staging)
        working-directory: infra/envs/staging
        run: |
          terraform init
          terraform validate
          terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      - name: Terraform Validate (prod)
        working-directory: infra/envs/prod
        run: |
          terraform init
          terraform validate
          terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

  # ============================================================================
  # SECURITY SCANNING (ALL BRANCHES)
  # ============================================================================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-lambda-zips

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        timeout-minutes: 10
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # STAGING DEPLOYMENT (RELEASE BRANCHES ONLY)
  # ============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-lint, terraform-validate, security-scan]
    if: startsWith(github.ref_name, 'release')
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::379673441375:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda ZIPs
        uses: actions/download-artifact@v4
        with:
          name: lambda-zips
          path: dist/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.0'

      - name: Terraform Init
        working-directory: infra/envs/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: infra/envs/staging
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      # The following steps are commented out to prevent staging deployment when pushing to master branch
      # - name: Terraform Apply
      #   if: github.ref_name == 'master'
      #   working-directory: infra/envs/staging
      #   run: terraform apply -auto-approve tfplan
      #   env:
      #     TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      # - name: Run post-deploy tests
      #   if: github.ref_name == 'master'
      #   run: npm run postdeploy:staging
      #   env:
      #     AWS_REGION: ${{ env.AWS_REGION }}

  # ============================================================================
  # PRODUCTION DEPLOYMENT (MAIN BRANCH WITH MANUAL APPROVAL)
  # ============================================================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-lint, terraform-validate, security-scan]
    if: github.ref_name == 'master'
    environment: production
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::379673441375:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.0'

      - name: Terraform Init
        working-directory: infra/envs/prod
        run: terraform init

      - name: Terraform Plan
        working-directory: infra/envs/prod
        run: terraform plan -var-file=terraform.tfvars -out=tfplan
        env:
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

      # --- Manual approval step for production deployment (commented out for now) ---
      # - name: Wait for manual approval
      #   uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ secrets.GITHUB_TOKEN }}
      #     approvers: user1,user2  # Replace with actual GitHub usernames
      #     instructions: 'Please review the staging environment before approving production deployment.'
      #
      # --- Production deployment steps (still commented out) ---
      # - name: Terraform Apply
      #   working-directory: infra/envs/prod
      #   run: terraform apply -auto-approve tfplan
      #   env:
      #     TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      #
      # - name: Run post-deploy tests
      #   run: npm run postdeploy:prod
      #   env:
      #     AWS_REGION: ${{ env.AWS_REGION }}
      #
      # To enable production deployment with manual approval, uncomment the above steps and configure approvers.

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================

  notify-staging:
    name: Notify Staging Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && startsWith(github.ref_name, 'release')

    steps:
      - name: Notify on success
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Staging deployment successful!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your notification logic here (Slack, Teams, etc.)

      - name: Notify on failure
        if: needs.deploy-staging.result == 'failure'
        run: |
          echo "❌ Staging deployment failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your notification logic here (Slack, Teams, etc.)

  notify-production:
    name: Notify Production Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && github.ref_name == 'master'

    steps:
      - name: Notify on success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "✅ Production deployment successful!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your notification logic here (Slack, Teams, etc.)

      - name: Notify on failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Production deployment failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your notification logic here (Slack, Teams, etc.)
